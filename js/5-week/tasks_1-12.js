/* *** Task 1 *** */
// Cоздать функцию Car, которая принимает 3 параметра:
// марка, модель, цена.
// Функция возвращает объект с переданными полями.
// С помощью ключевого слова new создайте 3 объекта автомобилей с разными данными.
// Выведите в консоль.
{
  // Пиши код ниже этой строки
  console.log('Task 1: ');
  //
}

/* *** Task 2 *** */
// Cоздайте функцию Car, которая принимает так называемый объект настроек, который содержит 3 поля (марка, модель, цена):
// Внутри себя функция записывает через контекст (this) эти данные "в себя".
// Также (вне функции) добавьте !!! НА ПРОТОТИП !!! Car 2 метода:
// - получитьЦену, который ! ЧЕРЕЗ this ! возвращает цену автомобиля
// - установитьЦену, который ! ЧЕРЕЗ this ! меняет цену автомобиля на переданную в качестве параметра
// Создайте при помощи ключевого слова new автомобиль и вызовите эти 2 функции
{
  console.log('Task 2: ');
}

/* *** Task 3 *** */
// Допишите функцию Storage, которая принимает массив строковых значений items.
// Внутри себя функция записывает через контекст (this) эти данные "в себя".
// Также (вне функции) добавьте на прототип Storage 3 метода, которые вызываются ниже в коде.
// По возвращаемому значению (см. комментарии) определите, что должен делать метод.
{
  // Пиши код ниже этой строки
  function Storage() {}
  // Пиши код выше этой строки
  console.log('Task 3: ');
  const storage = new Storage(['Games', 'Video', 'Documents']);
  console.log(storage.getItems()); // ["Games", "Video", "Documents"]
  storage.addItem('Music');
  console.log(storage.getItems()); // ["Games", "Video", "Documents", "Music"]
  storage.removeItem('Video');
  console.log(storage.getItems()); // ["Games", "Documents", "Music"]
  //
}

/* *** Task 4 *** */
// Допишите функцию StringBuilder, которая принимает строковое значение.
// Внутри себя функция записывает через контекст (this) эти данные "в себя".
// Также (вне функции) добавьте на прототип функции StringBuilder 3 метода, которые вызываются ниже в коде.
// По возвращаемому значению (см. комментарии) определите, что должен делать метод.
{
  // Пиши код ниже этой строки
  function StringBuilder() {}

  // Пиши код выше этой строки
  console.log('Task 4: ');
  const builder = new StringBuilder('.');
  console.log(builder.getValue()); // '.'
  builder.padStart('^');
  console.log(builder.getValue()); // '^.'
  builder.padEnd('^');
  console.log(builder.getValue()); // '^.^'
  builder.padBoth('=');
  console.log(builder.getValue()); // '=^.^='
  //
}

/* *** Task 5 *** */
// Cоздайте класс Car, конструктор которого принимает так называемый объект настроек, который содержит 3 поля (марка, модель, цена):
// Конструктор "записывает" эти данные в экземпляр класса.
// Создайте при помощи данного класса автомобиль и выведите его в консоль.
{
  // Пиши код ниже этой строки

  console.log('Task 5: ');
  //
}

/* *** Task 6 *** */
// Дополните класс Car двумя методами:
// - получитьЦену
// - изменитьЦену
// Методы релизуют действия, соответствующие их названия.
// В методе изменитьЦену осуществите проверку какой аргумент приходит.
// !!! Цена - это обязательно ПОЛОЖИТЕЛЬНОЕ ЧИСЛО.
{
  // Пиши код ниже этой строки
  console.log('Task 6: ');
  //
}

/* *** Task 7 *** */
// Дополните класс Car ! ПРИВАТНЫМ ! полем "двигатель" (строковое значение) и двумя методами, которые работают с этим полем
// - получитьДвигатель
// - изменитьДвигатель
{
  // Пиши код ниже этой строки
  console.log('Task 7: ');
  //
}

/* *** Task 8 *** */
// Допишите класс Storage (по аналогии с заданием 3).
// Поле items - приватное.
// По возвращаемому значению (см. комментарии) определите, что должен делать метод класса.
{
  // Пиши код ниже этой строки
  class Storage {}
  // Пиши код выше этой строки
  console.log('Task 8: ');
  const storage = new Storage(['Games', 'Video', 'Documents']);
  console.log(storage.getItems()); // ["Games", "Video", "Documents"]
  storage.addItem('Music');
  console.log(storage.getItems()); // ["Games", "Video", "Documents", "Music"]
  storage.removeItem('Video');
  console.log(storage.getItems()); // ["Games", "Documents", "Music"]
}

/* *** Task 9 *** */
// Допишите класс Storage (по аналогии с заданием 4).
// Поле value - приватное.
// По возвращаемому значению (см. комментарии) определите, что должен делать метод класса.
{
  // Пиши код ниже этой строки
  class StringBuilder {}
  // Пиши код выше этой строки
  console.log('Task 9: ');
  const builder = new StringBuilder('.');
  console.log(builder.getValue()); // '.'
  builder.padStart('^');
  console.log(builder.getValue()); // '^.'
  builder.padEnd('^');
  console.log(builder.getValue()); // '^.^'
  builder.padBoth('=');
  console.log(builder.getValue()); // '=^.^='
  builder.clear();
  console.log(builder.getValue()); // ''
}

/* *** Task 10 *** */
// Реализуйте класс Car так, чтобы в нем для каждого поля была функция-сеттер и функция-геттер
// Всего в классе 3 приватных поля: марка, модель, цена
{
  console.log('Task 10: ');
}

/* *** Task 11 *** */
// Реализуйте класс Car, в котором есть статическое поле "МАКСИМАЛЬНАЯ_ЦЕНА" с числовым значением 50000 и приватное поле "цена",
// В классе есть конструктор, геттер и сеттер для цены.
// При чем сеттер работает так: если новая цена превышает максимальную цену, то сохраняется старая цена,
// если новая цена меньше максимальной, устанавливается новая цена.
{
  class Car {
    // Пиши код ниже этой строки
    // Пиши код выше этой строки
  }
  console.log('Task 11: ');

  const audi = new Car({ price: 35000 });
  console.log(audi.price); // 35000

  audi.price = 49000;
  console.log(audi.price); // 49000

  audi.price = 51000;
  console.log(audi.price); // 49000
}

/* *** Task 12 *** */
// Дополните класс Car из задания 11 статическим методом "проверитьЦену", который принимает в качестве аргумента цену
// В случае если цена больше максимальной, возвращается 'Внимание! Цена превышает допустимую.'
// если цена меньше,  возвращается 'Всё хорошо, цена в порядке.'
{
  class Car {
    // Пиши код ниже этой строки
    // Скопируйте код внутри класса из задания 11
    // Пиши код выше этой строки
  }

  const audi = new Car({ price: 36000 });
  const bmw = new Car({ price: 64000 });

  console.log('Task 12: ');
  console.log(Car.checkPrice(audi.price)); // Всё хорошо, цена в порядке.
  console.log(Car.checkPrice(bmw.price)); // Внимание! Цена превышает допустимую.
}
